<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>File Sharing App</title>
		<base target="_blank" rel="noopener noreferrer" />
		<link rel="icon" href="data:;base64,iVBORw0KGgo=" />
		<link rel="stylesheet" href="/styles.css" />
	</head>
	<body>
		<h1>File Sharing App</h1>
		<form id="uploadForm" enctype="multipart/form-data" class="form">
			<input type="file" name="file" id="fileInput" required />
			<button type="submit">Upload</button>
		</form>
		<p id="uploadStatus" style="text-align: center"></p>
		<div id="warningMessage" style="display: none">
			<p
				id="uploadStatusMessage"
				style="text-align: center; color: red; font-weight: bold"
			>
				Please do not close this tab until upload is complete.
			</p>
			<img
				id="uploadLoader"
				src="loader.svg"
				alt="Loading"
				style="margin-left: 0.5em"
			/>
		</div>

		<button id="copyLinkButton" onclick="copyLink()" style="display: none">
			Copy Link
		</button>

		<script>
			const serverIP = "<%= serverIP %>";

			function copyToClipboard(value) {
				var textarea = document.createElement("textarea");
				textarea.value = value;
				document.body.appendChild(textarea);
				textarea.select();
				try {
					var successful = document.execCommand("copy");
					if (successful) {
						alert("Link copied to clipboard!");
					} else {
						alert("Failed to copy link.");
					}
				} catch (error) {
					alert("Failed to copy link: ", error);
				}
				document.body.removeChild(textarea);
			}

			function copyLink() {
				var shareableLink = document.getElementById("shareableLink").innerHTML;
				copyToClipboard(shareableLink);
			}

			const sha256 = function sha256(ascii) {
				function rightRotate(value, amount) {
					return (value >>> amount) | (value << (32 - amount));
				}

				let mathPow = Math.pow;
				let maxWord = mathPow(2, 32);
				let lengthProperty = "length";
				let i, j; // Used as a counter across the whole file
				let result = "";

				let words = [];
				let asciiBitLength = ascii[lengthProperty] * 8;

				//* caching results is optional - remove/add slash from front of this line to toggle
				// Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes
				// (we actually calculate the first 64, but extra values are just ignored)
				let hash = (sha256.h = sha256.h || []);
				// Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes
				let k = (sha256.k = sha256.k || []);
				let primeCounter = k[lengthProperty];
				/*/
	let hash = [], k = [];
	let primeCounter = 0;
	//*/

				let isComposite = {};
				for (let candidate = 2; primeCounter < 64; candidate++) {
					if (!isComposite[candidate]) {
						for (i = 0; i < 313; i += candidate) {
							isComposite[i] = candidate;
						}
						hash[primeCounter] = (mathPow(candidate, 0.5) * maxWord) | 0;
						k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;
					}
				}

				ascii += "\x80"; // Append Æ‡' bit (plus zero padding)
				while ((ascii[lengthProperty] % 64) - 56) ascii += "\x00"; // More zero padding
				for (i = 0; i < ascii[lengthProperty]; i++) {
					j = ascii.charCodeAt(i);
					if (j >> 8) return; // ASCII check: only accept characters in range 0-255
					words[i >> 2] |= j << (((3 - i) % 4) * 8);
				}
				words[words[lengthProperty]] = (asciiBitLength / maxWord) | 0;
				words[words[lengthProperty]] = asciiBitLength;

				// process each chunk
				for (j = 0; j < words[lengthProperty]; ) {
					let w = words.slice(j, (j += 16)); // The message is expanded into 64 words as part of the iteration
					let oldHash = hash;
					// This is now the undefinedworking hash", often labelled as letiables a...g
					// (we have to truncate as well, otherwise extra entries at the end accumulate
					hash = hash.slice(0, 8);

					for (i = 0; i < 64; i++) {
						let i2 = i + j;
						// Expand the message into 64 words
						// Used below if
						let w15 = w[i - 15],
							w2 = w[i - 2];

						// Iterate
						let a = hash[0],
							e = hash[4];
						let temp1 =
							hash[7] +
							(rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) + // S1
							((e & hash[5]) ^ (~e & hash[6])) + // ch
							k[i] +
							// Expand the message schedule if needed
							(w[i] =
								i < 16
									? w[i]
									: (w[i - 16] +
											(rightRotate(w15, 7) ^
												rightRotate(w15, 18) ^
												(w15 >>> 3)) + // s0
											w[i - 7] +
											(rightRotate(w2, 17) ^
												rightRotate(w2, 19) ^
												(w2 >>> 10))) | // s1
									  0);
						// This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble
						let temp2 =
							(rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) + // S0
							((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2])); // maj

						hash = [(temp1 + temp2) | 0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()
						hash[4] = (hash[4] + temp1) | 0;
					}

					for (i = 0; i < 8; i++) {
						hash[i] = (hash[i] + oldHash[i]) | 0;
					}
				}

				for (i = 0; i < 8; i++) {
					for (j = 3; j + 1; j--) {
						let b = (hash[i] >> (j * 8)) & 255;
						result += (b < 16 ? 0 : "") + b.toString(16);
					}
				}
				return result;
			};

			document
				.getElementById("uploadForm")
				.addEventListener("submit", function (e) {
					e.preventDefault();

					let fileInput = document.getElementById("fileInput");
					let file = fileInput.files[0];
					let formData = new FormData();

					let fileName = file.name.slice(0, file.name.lastIndexOf("."));
					let uniqueLink = Date.now();
					const hash = sha256(fileName);
					const fileID = uniqueLink + "_" + hash.slice(0, 7);
					formData.append("file_id", fileID);
					formData.append("file", file);
					console.log(fileID);

					uploadStatus.innerHTML =
						'File will upload in background. <br /> Link: <a href="/' +
						fileID +
						'" ' +
						"id=" +
						"shareableLink" +
						">http://" +
						serverIP +
						":8000/" +
						fileID +
						"</a>";

					warningMessage.style.display = "flex";
					let uploadStatusMessage = document.getElementById(
						"uploadStatusMessage"
					);
					uploadStatusMessage.innerHTML =
						"Please do not close this tab until upload is complete.";
					let uploadLoader = document.getElementById("uploadLoader");
					uploadLoader.style.display = "block";

					let copyLinkButton = document.getElementById("copyLinkButton");
					copyLinkButton.style.display = "block";
					let xhr = new XMLHttpRequest();
					xhr.open("POST", "/upload", true);
					xhr.onload = function () {
						if (xhr.status === 200) {
							console.log("Success!");
							localStorage.setItem("uploadStatus", "success");
							let uploadStatusMessage = document.getElementById(
								"uploadStatusMessage"
							);
							uploadStatusMessage.innerHTML =
								"File uploaded successfully. Can close this tab now.";
							let uploadLoader = document.getElementById("uploadLoader");
							uploadLoader.style.display = "none";
						} else {
							let uploadStatus = document.getElementById("uploadStatus");
							uploadStatus.innerHTML =
								"Error uploading file. Link will not work.";
							localStorage.setItem("uploadStatus", "failure");
						}
					};
					xhr.send(formData);
					// });
				});
		</script>
	</body>
</html>
